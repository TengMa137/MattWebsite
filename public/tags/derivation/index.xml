<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Derivation on Welcome</title>
    <link>http://localhost:1313/tags/derivation/</link>
    <description>Recent content in Derivation on Welcome</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/derivation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to Error state Kalman Filter</title>
      <link>http://localhost:1313/posts/2023-8-2-eskf/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-8-2-eskf/</guid>
      <description>&lt;p&gt;Error state is the difference between True state $x_t$ and Nominal state $x$. The nominal state does not take into account the noise, just derived from motion equations. As a result there will be accumulate errors, which are collected in the error-state $\delta x$ and the ESKF will estimate these errors. In parallel with integration of the nominal state, the ESKF predicts a Gaussian estimate of the error-state, and inject the mean of error state back to nominal-state. &lt;br&gt;When the IMU measurement data arrives, we integrate it and put it into the nominal state variable. Since this approach does not consider noise, the result will naturally drift quickly, so we hope to put the error part as an error variable in ESKF. ESKF will consider the effects of various noises and zero offsets, and give a Gaussian distribution description of the error state. At the same time, ESKF itself, as a Kalman filter, also has a prediction process and a correction process, and the correction process needs to rely on sensor observations other than the IMU. After the correction, ESKF can give the posterior error Gaussian distribution, and then we can put this part of the error into the nominal state variable, and set ESKF to zero, thus completing a loop.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kalman Filter explained with derivation</title>
      <link>http://localhost:1313/posts/2023-7-24-kf/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-7-24-kf/</guid>
      <description>&lt;p&gt;Kalman Filter (KF) is a recursive state estimator widely used in sensor/data fusion. It&amp;rsquo;s an optimal Bayesian filter in linear Gaussian system, since it minimizes the estimated error covariance. It is also known as Gaussian Filter. KF is not applicable to discrete or hybrid state spaces. This blog helps understand Kalman Filter with simple examples and presents mathematical derivation from two different perspectives.&lt;/p&gt;&#xA;&lt;h1 id=&#34;modeling-robot-state-estimation&#34;&gt;&#xA;  Modeling Robot State Estimation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#modeling-robot-state-estimation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;details&gt;&lt;summary&gt;CLICK ME&lt;/summary&gt;&#xD;&#xA;&lt;p&gt;Now we want to estimate the state of a robot &amp;lt;$p, v$&amp;gt;, $p = [p_x, p_y, p_z]^T$ for position and $v = [v_x, v_y, v_z]^T$ for velocity. The state at time $k-1$ is $x_{k-1}=(p_{k-1},v_{k-1})$, we can predict the state at time $k$ if the accelaration $a_k$ is given:&#xA;$$&#xA;p_k = p_{k-1}+v_{k-1} \Delta t + \frac{1}{2}a_k (\Delta t)^2 \&#xA;v_k = v_{k-1}+a_k \Delta t&#xA;$$&#xA;In matrix form:&#xA;$$&#xA;x_k = Ax_{k-1}+Ba_k&#xA;$$&#xA;where $A$ is state transition matrix and $B$ is called control input matrix.&#xA;$$A = \begin{bmatrix}1 &amp;amp; \Delta t \ 0 &amp;amp; 1 \end{bmatrix},&#xA;B_ = \begin{bmatrix} \frac{1}{2}(\Delta t)^2 \ \Delta t \end{bmatrix}&#xA;$$&#xA;This is the ideal case. In reality the robot is disturbed by so-called process noise, which models the uncertainty introduced by the state transition. Usually we assume the process noise $\omega_k$ follows a Gaussian distribution (it has to be Gaussian in KF) with zero mean $\omega_k \sim N(0,Q_k)$, $Q_k$ is the covariance matrix. Another observation of the state $z_k$ comes from sensor such as GPS, with measurement noise in Gaussian $v_k \sim N(0, R_k)$. State space model:&#xA;$$&#xA;\begin{aligned}&#xA;&amp;amp;x_k = Ax_{k-1}+Ba_k+\omega_k \&#xA;&amp;amp;z_k = Hx_k+v_k&#xA;\end{aligned}&#xA;$$&#xA;where $H_k$ is measurement matrix that map the state space into the observation space.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
