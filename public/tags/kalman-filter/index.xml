<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kalman Filter on Welcome</title>
    <link>http://localhost:1313/tags/kalman-filter/</link>
    <description>Recent content in Kalman Filter on Welcome</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 24 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kalman-filter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kalman Filter explained with derivation</title>
      <link>http://localhost:1313/posts/2023-7-24-kf/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-7-24-kf/</guid>
      <description>&lt;p&gt;Kalman Filter (KF) is a recursive state estimator widely used in sensor/data fusion. It&amp;rsquo;s an optimal Bayesian filter in linear Gaussian system, since it minimizes the estimated error covariance. It is also known as Gaussian Filter. KF is not applicable to discrete or hybrid state spaces. This blog helps understand Kalman Filter with simple examples and presents mathematical derivation from two different perspectives.&lt;/p&gt;&#xA;&lt;h1 id=&#34;modeling-robot-state-estimation&#34;&gt;&#xA;  Modeling Robot State Estimation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#modeling-robot-state-estimation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;details&gt;&lt;summary&gt;CLICK ME&lt;/summary&gt;&#xD;&#xA;&lt;p&gt;Now we want to estimate the state of a robot &amp;lt;$p, v$&amp;gt;, $p = [p_x, p_y, p_z]^T$ for position and $v = [v_x, v_y, v_z]^T$ for velocity. The state at time $k-1$ is $x_{k-1}=(p_{k-1},v_{k-1})$, we can predict the state at time $k$ if the accelaration $a_k$ is given:&#xA;$$&#xA;p_k = p_{k-1}+v_{k-1} \Delta t + \frac{1}{2}a_k (\Delta t)^2 \&#xA;v_k = v_{k-1}+a_k \Delta t&#xA;$$&#xA;In matrix form:&#xA;$$&#xA;x_k = Ax_{k-1}+Ba_k&#xA;$$&#xA;where $A$ is state transition matrix and $B$ is called control input matrix.&#xA;$$A = \begin{bmatrix}1 &amp;amp; \Delta t \ 0 &amp;amp; 1 \end{bmatrix},&#xA;B_ = \begin{bmatrix} \frac{1}{2}(\Delta t)^2 \ \Delta t \end{bmatrix}&#xA;$$&#xA;This is the ideal case. In reality the robot is disturbed by so-called process noise, which models the uncertainty introduced by the state transition. Usually we assume the process noise $\omega_k$ follows a Gaussian distribution (it has to be Gaussian in KF) with zero mean $\omega_k \sim N(0,Q_k)$, $Q_k$ is the covariance matrix. Another observation of the state $z_k$ comes from sensor such as GPS, with measurement noise in Gaussian $v_k \sim N(0, R_k)$. State space model:&#xA;$$&#xA;\begin{aligned}&#xA;&amp;amp;x_k = Ax_{k-1}+Ba_k+\omega_k \&#xA;&amp;amp;z_k = Hx_k+v_k&#xA;\end{aligned}&#xA;$$&#xA;where $H_k$ is measurement matrix that map the state space into the observation space.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
